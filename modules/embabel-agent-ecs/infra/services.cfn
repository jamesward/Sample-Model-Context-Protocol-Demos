AWSTemplateFormatVersion: "2010-09-09"
Description: Embabel Agent ECS - ECS Services

Parameters:
  BaseStackName:
    Type: String
    Default: embabel-agent-base
    Description: Name of the base infrastructure stack
  
  ServerImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for the MCP server
  
  ClientImageTag:
    Type: String
    Default: latest
    Description: Docker image tag for the MCP client
  
  ClientStartupDelay:
    Type: Number
    Default: 0
    Description: Initial desired count for client service (set to 0 to start manually after server is ready)
    MinValue: 0
    MaxValue: 1

Resources:
  MCPServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-server-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub ${BaseStackName}-server-exec-role
      ContainerDefinitions:
        - Name: embabel-agent-server
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/embabel-agent-server:${ServerImageTag}
          PortMappings:
            - Name: http
              ContainerPort: 8081
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 
                Fn::ImportValue: !Sub ${BaseStackName}-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  MCPClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-client-task
      Cpu: '256'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub ${BaseStackName}-client-exec-role
      TaskRoleArn: 
        Fn::ImportValue: !Sub ${BaseStackName}-task-role
      ContainerDefinitions:
        - Name: embabel-agent-client
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/embabel-agent-client:${ClientImageTag}
          PortMappings:
            - ContainerPort: 8080
          EntryPoint:
            - "/bin/sh"
            - "-c"
          Command:
            - |
              # Fetch credentials from task role and export them
              if [ -n "$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI" ]; then
                echo "Fetching IAM role credentials..."
                CREDS=$(curl -s http://169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI)
                export AWS_ACCESS_KEY_ID=$(echo $CREDS | sed -n 's/.*"AccessKeyId":"\([^"]*\)".*/\1/p')
                export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | sed -n 's/.*"SecretAccessKey":"\([^"]*\)".*/\1/p')
                export AWS_SESSION_TOKEN=$(echo $CREDS | sed -n 's/.*"Token":"\([^"]*\)".*/\1/p')
                echo "Credentials exported successfully"
              fi
              # Start the application with the launcher from the buildpack
              exec /cnb/process/web
          Environment:
            - Name: MCP_SERVICE_URL
              Value: !Sub http://mcp-server.${BaseStackName}:8081
            - Name: SPRING_PROFILES_ACTIVE
              Value: bedrock
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 
                Fn::ImportValue: !Sub ${BaseStackName}-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  MCPServerECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-server
      Cluster: 
        Fn::ImportValue: !Sub ${BaseStackName}-cluster-name
      TaskDefinition: !Ref MCPServerTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: 
          Fn::ImportValue: !Sub ${BaseStackName}-namespace-arn
        Services:
          - PortName: http
            DiscoveryName: mcp-server
            ClientAliases:
              - Port: 8081
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${BaseStackName}-server-sg
          Subnets:
            - Fn::ImportValue: !Sub ${BaseStackName}-subnet1-id
            - Fn::ImportValue: !Sub ${BaseStackName}-subnet2-id

  MCPClientECSService:
    Type: AWS::ECS::Service
    DependsOn: MCPServerECSService
    Properties:
      ServiceName: !Sub ${AWS::StackName}-client
      Cluster: 
        Fn::ImportValue: !Sub ${BaseStackName}-cluster-name
      TaskDefinition: !Ref MCPClientTaskDefinition
      DesiredCount: !Ref ClientStartupDelay
      LaunchType: FARGATE
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: 
          Fn::ImportValue: !Sub ${BaseStackName}-namespace-arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${BaseStackName}-client-sg
          Subnets:
            - Fn::ImportValue: !Sub ${BaseStackName}-subnet1-id
            - Fn::ImportValue: !Sub ${BaseStackName}-subnet2-id
      LoadBalancers:
        - ContainerName: "embabel-agent-client"
          ContainerPort: 8080
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: 
            Fn::ImportValue: !Sub ${BaseStackName}-target-group

Outputs:
  ServerServiceArn:
    Description: MCP Server Service ARN
    Value: !Ref MCPServerECSService

  ClientServiceArn:
    Description: MCP Client Service ARN
    Value: !Ref MCPClientECSService

  ServerServiceName:
    Description: MCP Server Service Name
    Value: !GetAtt MCPServerECSService.Name

  ClientServiceName:
    Description: MCP Client Service Name
    Value: !GetAtt MCPClientECSService.Name

  LoadBalancerURL:
    Description: Load Balancer URL
    Value: !Sub 
      - "http://${LoadBalancerDNS}"
      - LoadBalancerDNS: 
          Fn::ImportValue: !Sub ${BaseStackName}-lb-dns